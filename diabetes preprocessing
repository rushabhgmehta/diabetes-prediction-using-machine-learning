import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
data=pd.read_csv(r'C:\Users\aashe\Downloads\diabetess.csv')
data.head()
data.info()
data.describe()
data.value_counts('Outcome')
sns.countplot(data.Outcome)
sns.pairplot(data,hue='Outcome',diag_kind='kde')
plt.figure(figsize=(8,8))
sns.heatmap(data.corr(),annot=True)
sns.boxplot(x='Outcome',y='Pregnancies',data=data)
sns.boxplot(x='Outcome',y='Glucose',data=data)
sns.boxplot(x='Outcome',y='BloodPressure',data=data)
sns.boxplot(x='Outcome',y='SkinThickness',data=data)
sns.boxplot(x='Outcome',y='Insulin',data=data)
sns.boxplot(x='Outcome',y='BMI',data=data)
sns.boxplot(x='Outcome',y='DiabetesPedigreeFunction',data=data)
sns.boxplot(x='Outcome',y='Age',data=data)
def outlier(data):
    data=np.sort(data)
    Q1,Q3=np.percentile(data,[25,75])
    IQR=Q3-Q1
    lower=Q1-(1.5*IQR)
    upper=Q3+(1.5*IQR)
    return lower,upper

lr,ur=outlier(data['Pregnancies'][data.Outcome==0])
data.drop(data.index[(data['Pregnancies'][(data.Pregnancies < lr) & (data.Outcome == 0)])],inplace=True)
data.drop(data.index[(data['Pregnancies'][(data.Pregnancies > ur) & (data.Outcome == 0)])],inplace=True)
data.value_counts('Outcome')
sns.boxplot(x='Outcome',y='Pregnancies',data=data)
lr,ur=outlier(data['Pregnancies'][data.Outcome == 0])
data.drop(data.index[(data.Pregnancies > ur) & (data.Outcome == 0)],inplace=True)
data.drop(data.index[(data.Pregnancies < lr) & (data.Outcome == 0)],inplace=True)
data.value_counts('Outcome')
sns.boxplot(x='Outcome',y='Pregnancies',data=data)
lr,ur=outlier(data['Glucose'][data.Outcome == 0])
data.drop(data.index[(data.Glucose > ur) & (data.Outcome == 0)],inplace=True)
data.drop(data.index[(data.Glucose < lr) & (data.Outcome == 0)],inplace=True)
data.value_counts('Outcome')
lr,ur=outlier(data['Glucose'][data.Outcome == 1])
data.drop(data.index[(data.Glucose > ur) & (data.Outcome == 1)],inplace=True)
data.drop(data.index[(data.Glucose < lr) & (data.Outcome == 1)],inplace=True)
data.value_counts('Outcome')
sns.boxplot(x='Outcome',y='Glucose',data=data)
lr,ur=outlier(data['Glucose'][data.Outcome == 0])
data.drop(data.index[(data.Glucose > ur) & (data.Outcome == 0)],inplace=True)
data.drop(data.index[(data.Glucose < lr) & (data.Outcome == 0)],inplace=True)
data.value_counts('Outcome')
sns.boxplot(x='Outcome',y='Glucose',data=data)
lr,ur=outlier(data['BloodPressure'][data.Outcome == 0])
data.drop(data.index[(data.BloodPressure > ur) & (data.Outcome == 0)],inplace=True)
data.drop(data.index[(data.BloodPressure < lr) & (data.Outcome == 0)],inplace=True)
data.value_counts('Outcome')
lr,ur=outlier(data['BloodPressure'][data.Outcome == 1])
data.drop(data.index[(data.BloodPressure > ur) & (data.Outcome == 1)],inplace=True)
data.drop(data.index[(data.BloodPressure < lr) & (data.Outcome == 1)],inplace=True)
data.value_counts('Outcome')
sns.boxplot(x='Outcome',y='BloodPressure',data=data)
lr,ur=outlier(data['BloodPressure'][data.Outcome == 1])
data.drop(data.index[(data.BloodPressure > ur) & (data.Outcome == 1)],inplace=True)
data.drop(data.index[(data.BloodPressure < lr) & (data.Outcome == 1)],inplace=True)
data.value_counts('Outcome')
sns.boxplot(x='Outcome',y='BloodPressure',data=data)
lr,ur=outlier(data['SkinThickness'][data.Outcome == 1])
data.drop(data.index[(data.SkinThickness > ur) & (data.Outcome == 1)],inplace=True)
data.drop(data.index[(data.SkinThickness < lr) & (data.Outcome == 1)],inplace=True)
data.value_counts('Outcome')
sns.boxplot(x='Outcome',y='SkinThickness',data=data)
lr,ur=outlier(data['Insulin'][data.Outcome == 0])
data.drop(data.index[(data.Insulin > ur) & (data.Outcome == 0)],inplace=True)
data.drop(data.index[(data.Insulin < lr) & (data.Outcome == 0)],inplace=True)
data.value_counts('Outcome')
lr,ur=outlier(data['Insulin'][data.Outcome == 1])
data.drop(data.index[(data.Insulin > ur) & (data.Outcome == 1)],inplace=True)
data.drop(data.index[(data.Insulin < lr) & (data.Outcome == 1)],inplace=True)
data.value_counts('Outcome')
sns.boxplot(x='Outcome',y='Insulin',data=data)
lr,ur=outlier(data['Insulin'][data.Outcome == 0])
data.drop(data.index[(data.Insulin > ur) & (data.Outcome == 0)],inplace=True)
data.drop(data.index[(data.Insulin < lr) & (data.Outcome == 0)],inplace=True)
data.value_counts('Outcome')
sns.boxplot(x='Outcome',y='Insulin',data=data)
lr,ur=outlier(data['BMI'][data.Outcome == 0])
data.drop(data.index[(data.BMI > ur) & (data.Outcome == 0)],inplace=True)
data.drop(data.index[(data.BMI < lr) & (data.Outcome == 0)],inplace=True)
data.value_counts('Outcome')
lr,ur=outlier(data['BMI'][data.Outcome == 1])
data.drop(data.index[(data.BMI > ur) & (data.Outcome == 1)],inplace=True)
data.drop(data.index[(data.BMI < lr) & (data.Outcome == 1)],inplace=True)
data.value_counts('Outcome')
sns.boxplot(x='Outcome',y='BMI',data=data)
lr,ur=outlier(data['BMI'][data.Outcome == 1])
data.drop(data.index[(data.BMI > ur) & (data.Outcome == 1)],inplace=True)
data.drop(data.index[(data.BMI < lr) & (data.Outcome == 1)],inplace=True)
data.value_counts('Outcome')
sns.boxplot(x='Outcome',y='BMI',data=data)
lr,ur=outlier(data['DiabetesPedigreeFunction'][data.Outcome == 0])
data.drop(data.index[(data.DiabetesPedigreeFunction > ur) & (data.Outcome == 0)],inplace=True)
data.drop(data.index[(data.DiabetesPedigreeFunction < lr) & (data.Outcome == 0)],inplace=True)
data.value_counts('Outcome')
lr,ur=outlier(data['DiabetesPedigreeFunction'][data.Outcome == 1])
data.drop(data.index[(data.DiabetesPedigreeFunction > ur) & (data.Outcome == 1)],inplace=True)
data.drop(data.index[(data.DiabetesPedigreeFunction < lr) & (data.Outcome == 1)],inplace=True)
data.value_counts('Outcome')
sns.boxplot(x='Outcome',y='DiabetesPedigreeFunction',data=data)
lr,ur=outlier(data['DiabetesPedigreeFunction'][data.Outcome == 0])
data.drop(data.index[(data.DiabetesPedigreeFunction > ur) & (data.Outcome == 0)],inplace=True)
data.drop(data.index[(data.DiabetesPedigreeFunction < lr) & (data.Outcome == 0)],inplace=True)
data.value_counts('Outcome')
sns.boxplot(x='Outcome',y='DiabetesPedigreeFunction',data=data)
lr,ur=outlier(data['DiabetesPedigreeFunction'][data.Outcome == 0])
data.drop(data.index[(data.DiabetesPedigreeFunction > ur) & (data.Outcome == 0)],inplace=True)
data.drop(data.index[(data.DiabetesPedigreeFunction < lr) & (data.Outcome == 0)],inplace=True)
data.value_counts('Outcome')
sns.boxplot(x='Outcome',y='DiabetesPedigreeFunction',data=data)
lr,ur=outlier(data['DiabetesPedigreeFunction'][data.Outcome == 0])
data.drop(data.index[(data.DiabetesPedigreeFunction > ur) & (data.Outcome == 0)],inplace=True)
data.drop(data.index[(data.DiabetesPedigreeFunction < lr) & (data.Outcome == 0)],inplace=True)
data.value_counts('Outcome')
sns.boxplot(x='Outcome',y='DiabetesPedigreeFunction',data=data)
lr,ur=outlier(data['DiabetesPedigreeFunction'][data.Outcome == 0])
data.drop(data.index[(data.DiabetesPedigreeFunction > ur) & (data.Outcome == 0)],inplace=True)
data.drop(data.index[(data.DiabetesPedigreeFunction < lr) & (data.Outcome == 0)],inplace=True)
data.value_counts('Outcome')
sns.boxplot(x='Outcome',y='DiabetesPedigreeFunction',data=data)
lr,ur=outlier(data['Age'][data.Outcome == 0])
data.drop(data.index[(data.Age > ur) & (data.Outcome == 0)],inplace=True)
data.drop(data.index[(data.Age < lr) & (data.Outcome == 0)],inplace=True)
data.value_counts('Outcome')
lr,ur=outlier(data['Age'][data.Outcome == 1])
data.drop(data.index[(data.Age > ur) & (data.Outcome == 1)],inplace=True)
data.drop(data.index[(data.Age < lr) & (data.Outcome == 1)],inplace=True)
data.value_counts('Outcome')
sns.boxplot(x='Outcome',y='Age',data=data)
lr,ur=outlier(data['Age'][data.Outcome == 0])
data.drop(data.index[(data.Age > ur) & (data.Outcome == 0)],inplace=True)
data.drop(data.index[(data.Age < lr) & (data.Outcome == 0)],inplace=True)
data.value_counts('Outcome')
sns.boxplot(x='Outcome',y='Age',data=data)
lr,ur=outlier(data['Age'][data.Outcome == 0])
data.drop(data.index[(data.Age > ur) & (data.Outcome == 0)],inplace=True)
data.drop(data.index[(data.Age < lr) & (data.Outcome == 0)],inplace=True)
data.value_counts('Outcome')
sns.boxplot(x='Outcome',y='Age',data=data)
data.info()
data.head()
data.value_counts('Outcome')
X=data.iloc[:,:-1].values
Y=data.iloc[:,-1].values
from sklearn.model_selection import train_test_split
X_train,X_test,Y_train,Y_test=train_test_split(X,Y,test_size=0.25)
from sklearn.preprocessing import StandardScaler
sc=StandardScaler()
X_train=sc.fit_transform(X_train)
X_test=sc.transform(X_test)
from sklearn.linear_model import LogisticRegression
reg=LogisticRegression()
reg.fit(X_train,Y_train)
Y_pred=reg.predict(X_test)
from sklearn.metrics import precision_score
precision_score(Y_test,Y_pred)
from sklearn.metrics import recall_score
recall_score(Y_test,Y_pred)
from sklearn.metrics import confusion_matrix
cm=confusion_matrix(Y_test,Y_pred)
sns.heatmap(cm,annot=True)
